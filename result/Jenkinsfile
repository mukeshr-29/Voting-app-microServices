pipeline{
    agent any
    tools{
        nodejs 'node18'
    }
    environment{
        SCANNER_HOME=tool 'sonar-scanner'
    }
    stages{
        stage('git checkout'){
            steps{
                dir('result'){
                    git branch: 'main', url: 'https://github.com/mukeshr-29/Voting-app-microServices.git'
                }
            }
        }
        stage('install dependencies'){
            steps{
                dir('result'){
                    sh 'npm install'
                }
            }
        }
        stage('unit testing'){
            steps{
                dir('result/tests'){
                    sh 'npm test'
                }
            }
        }
        stage('filesystem scan'){
            steps{
                dir('result'){
                    sh 'trivy fs --format table -o trivyfs-report.html .'
                }
            }
        }
        stage('static code analysis'){
            steps{
                dir('result'){
                    script{
                        withSonarQubeEnv('sonar-server'){
                            sh '''
                                $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=result-service \
                                    -Dsonar.projectKey=result-service
                            '''
                        }
                    }
                }
            }
        }
        stage('quality gate'){
            steps{
                dir('result'){
                    script{
                        waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                    }
                }
            }
        }
        stage('docker image build and tag'){
            steps{
                dir('result'){
                    sh 'docker build -t mukeshr29/result-service .'
                }
            }
        }
        stage('docker image scanning'){
            steps{
                dir('result'){
                    sh 'trivy image --format table -o trivyimg-report.html mukeshr29/result-service'
                }
            }
        }
        stage('docker image push to repo'){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'dockerhub', toolName: 'docker'){
                        sh 'docker push mukeshr29/result-service'
                    }
                }
            }
        }
    }
}