pipeline{
    agent any
    environment{
        SCANNER_HOME=tool 'sonar-scanner'
    }
    stages{
        stage('git checkout'){
            steps{
                dir('worker'){
                    git branch: 'main', url: 'https://github.com/mukeshr-29/Voting-app-microServices.git'
                }
            }
        }
        stage('filesystem scan'){
            steps{
                dir('worker'){
                    sh 'trivy fs --format table -o trivyfs-workerreport.html .'
                }
            }
        }
        stage('static code analysis'){
            steps{
                dir('worker'){
                    script{
                        withSonarQubeEnv('sonar-server'){
                            sh '''
                                $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=worker-service \
                                    -Dsonar.projectKey=worker-service
                            '''
                        }
                    }
                }
            }
        }
        stage('quality gate'){
            steps{
                dir('worker'){
                    script{
                        waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                    }
                }
            }
        }
        stage('docker image build and tag'){
            steps{
                dir('worker'){
                    sh 'rm -rf worker'
                    sh 'docker build -t mukeshr29/worker-service .'
                }
            }
        }
        stage('docker image scanning'){
            steps{
                dir('worker'){
                    sh 'trivy image --format table -o trivyimg-workerreport.html mukeshr29/worker-service'
                }
            }
        }
        stage('docker image push to repo'){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'dockerhub', toolName: 'docker'){
                        sh 'docker push mukeshr29/worker-service'
                    }
                }
            }
        }
        stage('deploy to k8s'){
            steps{
                dir('worker'){
                    script{
                        withKubeConfig(caCertificate: '', clusterName: 'my-app', contextName: '', credentialsId: 'k8s', namespace: 'vote', restrictKubeConfigAccess: false, serverUrl: 'https://7AE0C0CA10BA163F2369F1970D91B954.gr7.us-east-1.eks.amazonaws.com'){
                            sh 'kubectl apply -f redis-deployment.yaml -f redis-service.yaml'
                            sh 'kubectl apply -f db-deployment.yaml -f db-service.yaml'
                            sh 'kubectl apply -f worker-deployment.yaml'
                        }
                    }
                }
            }
        }
    }
}